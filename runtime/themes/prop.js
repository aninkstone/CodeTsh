var fold = {
	lpeg : { 
        by : { indentation: "1" },
    },
    abl : {
        comment: {
            multiline: "?",
        },
        syntax: {
            based: "?",
        },
    },
}
	abl.syntax.based",
	asm.comment.explicit",
	asm.comment.multiline",
	asm.explicit.anywhere",
	asm.explicit.end",
	asm.explicit.start",
	asm.syntax.based",
	at.else",
	baan.inner.level",
	baan.keywords.based",
	baan.sections",
	baan.syntax.based",
	basic.comment.explicit",
	basic.explicit.anywhere",
	basic.explicit.end",
	basic.explicit.start",
	basic.syntax.based",
	coffeescript.comment",
	comment",
	comment.nimrod",
	comment.yaml",
	compact",
	cpp.comment.explicit",
	cpp.comment.multiline",
	cpp.explicit.anywhere",
	cpp.explicit.end",
	cpp.explicit.start",
	cpp.preprocessor.at.else",
	cpp.syntax.based",
	d.comment.explicit",
	d.comment.multiline",
	d.explicit.anywhere",
	d.explicit.end",
	d.explicit.start",
	d.syntax.based",
	directive",
	haskell.imports",
	html",
	html.preprocessor",
	hypertext.comment",
	hypertext.heredoc",
	perl.at.else",
	perl.comment.explicit",
	perl.package",
	perl.pod",
	preprocessor",
	quotes.nimrod",
	quotes.python",
	rust.comment.explicit",
	rust.comment.multiline",
	rust.explicit.anywhere",
	rust.explicit.end",
	rust.explicit.start",
	rust.syntax.based",
	sql.at.else",
	sql.only.begin",
	verilog.flags",
    }
	"lexer.lpeg.color.theme",
	"lexer.lpeg.home",
	"lexer.lpeg.script",
	"lexer.asm.comment.delimiter",
	"lexer.baan.styling.within.preprocessor",
	"lexer.caml.magic",
	"lexer.cpp.allow.dollars",
	"lexer.cpp.backquoted.strings",
	"lexer.cpp.escape.sequence",
	"lexer.cpp.hashquoted.strings",
	"lexer.cpp.track.preprocessor",
	"lexer.cpp.triplequoted.strings",
	"lexer.cpp.update.preprocessor",
	"lexer.cpp.verbatim.strings.allow.escapes",
	"lexer.css.hss.language",
	"lexer.css.less.language",
	"lexer.css.scss.language",
	"lexer.d.fold.at.else",
	"lexer.errorlist.escape.sequences",
	"lexer.errorlist.value.separate",
	"lexer.flagship.styling.within.preprocessor",
	"lexer.haskell.allow.hash",
	"lexer.haskell.allow.questionmark",
	"lexer.haskell.allow.quotes",
	"lexer.haskell.cpp",
	"lexer.haskell.import.safe",
	"lexer.html.django",
	"lexer.html.mako",
	"lexer.json.allow.comments",
	"lexer.json.escape.sequence",
	"lexer.metapost.comment.process",
	"lexer.metapost.interface.default",
	"lexer.pascal.smart.highlighting",
	"lexer.props.allow.initial.spaces",
	"lexer.python.keywords2.no.sub.identifiers",
	"lexer.python.literals.binary",
	"lexer.python.strings.b",
	"lexer.python.strings.f",
	"lexer.python.strings.over.newline",
	"lexer.python.strings.u",
	"lexer.python.unicode.identifiers",
	"lexer.rust.fold.at.else",
	"lexer.sql.allow.dotted.word",
	"lexer.sql.backticks.identifier",
	"lexer.sql.numbersign.comment",
	"lexer.tex.auto.if",
	"lexer.tex.comment.process",
	"lexer.tex.interface.default",
	"lexer.tex.use.keywords",
	"lexer.verilog.allupperkeywords",
	"lexer.verilog.fold.preprocessor.else",
	"lexer.verilog.portstyling",
	"lexer.verilog.track.preprocessor",
	"lexer.verilog.update.preprocessor",
	"lexer.xml.allow.scripts",
	"html.tags.case.sensitive",
	"asp.default.language",
	"nsis.ignorecase",
	"nsis.uservars",
	"ps.level",
	"sql.backslash.escapes",
	"styling.within.preprocessor",
	"tab.timmy.whinge.level",

